\  Reveiver (Pong) for STM8 eForth nRF24L01 with interrupt handler

\ load STM8S103 register addresse as constants

\res MCU: STM8S103
\res export BIT0 BIT1 BIT2 BIT3 BIT4 BIT5 BIT6 BIT7
\res export PB_ODR PB_DDR PB_CR1 PB_CR2
\res export PC_ODR PC_IDR PC_DDR PC_CR1 PC_CR2
\res export EXTI_CR1 INT_EXTI2

\ helper word: create BSET/BRES instructions
#require ]B!

5 CONSTANT _LED   \ Led connected to port B, Pin 5

$1C CONSTANT R.DYNPD
$1D CONSTANT R.FEATURE

NVM

: b>nRF ( a n r -- s )  \  copy n chars from a to reg. r
   _CSN.LOW ( a n r ) $20 OR SPI ( a n s ) >R
   0 DO
      DUP C@ SPI DROP 1+
   LOOP _CSN.HIGH
   ( a ) DROP R> ( s )
   ;

: nRF>b ( b c r -- s )  \  copy count c bytes from reg. r to buffer b
   \  return nRF24 STATUS s
   _CSN.LOW ( a n r ) SPI ( a n s ) >R
   0 DO
      0 SPI OVER C! 1+
   LOOP  _CSN.HIGH
   ( a ) DROP R> ( s )
   ;

: Setup_B  ( -- )
   [ 1 PB_DDR 5 ]B!  \ Port B outputs
   [ 1 PB_CR1 5 ]B!  \ set up as push pull outputs
   ;

: LED.On  ( -- )  [ 0 PB_ODR _LED ]B! ;

: LED.Off  ( -- )  [ 1 PB_ODR _LED ]B! ;

: FlashLed  ( -- )  LED.ON   2 ms   LED.Off ;

: TX.PWR0  ( -- )  \ Set to 250kbps and 0dBm (SI24R1: +7dBm) output
   [ $0 BIT5 >HIGH BIT2 >HIGH BIT1 >HIGH BIT0 >HIGH ] LITERAL $06 nRF!1
   ;

VARIABLE STATUS  \ nRF24 STATUS from IRQ

: IRQ_INIT ( -- )  \  enable nRF24 IRQ interrupt of PC.4
   [ 0 PC_DDR 4 ]B!
   [ 0 PC_CR1 4 ]B!
   [ 1 PC_CR2 4 ]B!    \  enable interrupt of PC.4
   [ 1 EXTI_CR1 5 ]B!  \  PC falling edge interrupt
   0 STATUS !
   ;

\ interrupt service routine
HERE ]      \ headerless code (keep xt on stack)
   SAVEC
   LED.On    \ signal: interrupt has been serviced
   RXBUFF P0_WIDTH R_RX_PAYLOAD nrf>b STATUS !
   $70 R.STATUS nRF!1
   RXBUFF 20 + 4 W_TX_PAYLOAD b>nRF DROP  \  payload (transmit counter)
   IRET
[ OVERT ( xt ) INT_EXTI2 ! \ set Port C int vector

: SetAckPayload  ( -- )  \ PRX and PTX config for payload in ACK
   ( DPL_P0 )     $01 R.DYNPD   nRF!1
   ( EN_ACK_PAY ) $02 R.FEATURE nRF!1  \  see footnote ^d
   ;

: Pong  ( -- )
   \  Pong until space char on serial console
   Setup_B
   FlashLed  \ on power up flash led so we know device is a pong
   500 ms FlashLed
   (RX)      \ now acting as a RX in standby state

   TX.PWR0   \ nRF all set
   SetAckPayload
   IRQ_INIT  \ get ready
   _CE.HD    \ Enter RX state
   BEGIN
      STATUS @ IF
         \ print buffer and nRF STATUS from  receive int
         RXBUFF P0_WIDTH TYPE STATUS ? CR
         0 STATUS !
         LED.Off  \ signal: message has been consumed
      THEN
      ?RX  \ input on serial line
      IF 32 = ELSE 0 THEN  \ only if it is a space char do we exit
   UNTIL
   ;

' Pong 'Boot !  \  install start-up routine

RAM
